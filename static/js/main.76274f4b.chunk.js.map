{"version":3,"sources":["api.ts","components/Loader/Loader.tsx","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/PersonLink.tsx","components/PeopleTable.tsx","components/PeoplePage.tsx","components/Navbar.tsx","App.tsx","index.tsx"],"names":["API_URL","wait","delay","Promise","resolve","setTimeout","getPeople","then","fetch","response","json","Loader","className","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","to","search","filterCenturies","SexParams","PeopleFilters","setSearchParams","sex","get","query","centuries","getAll","map","classNames","type","placeholder","onChange","event","target","trim","toLocaleLowerCase","century","includes","filter","el","length","PersonLink","person","pathname","slug","name","sortType","PeopleTable","people","selected","useParams","sort","order","handleSort","charAt","toUpperCase","slice","born","died","motherName","fatherName","mother","find","prsn","father","PeoplePage","useState","peopleFromServer","setPeopleFromServer","error","setError","isLoading","setIsLoading","getPeopleFromServer","useEffect","visiblePeople","result","a","b","localeCompare","reverse","setSortPeople","ifIncludes","personName","toLowerCase","Math","ceil","setFilteredPeople","getMarkUp","Navbar","role","isActive","App","path","element","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.76274f4b.chunk.js","sourcesContent":["import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import { SetURLSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\n\nimport { SearchLink } from './SearchLink';\nimport { getSearchWith } from '../utils/searchHelper';\n\ninterface Props {\n  searchParams: URLSearchParams,\n  setSearchParams: SetURLSearchParams,\n}\n\nconst filterCenturies = ['16', '17', '18', '19', '20'];\n\nenum SexParams {\n  All = '',\n  Male = 'm',\n  Female = 'f',\n}\n\nexport const PeopleFilters: React.FC<Props> = (\n  { searchParams, setSearchParams },\n) => {\n  const sex = searchParams.get('sex');\n  const query = searchParams.get('query');\n  const centuries = searchParams.getAll('centuries');\n\n  function handleChange(event: { target: { value: string; }; }) {\n    setSearchParams(\n      getSearchWith(\n        searchParams,\n        (event.target.value.trim())\n          ? { query: event.target.value.trim().toLocaleLowerCase() }\n          : { query: null },\n      ),\n    );\n  }\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        {Object.entries(SexParams).map(([key, value]) => (\n          <SearchLink\n            key={key}\n            params={{ sex: value || null }}\n            className={classNames(\n              { 'is-active': sex === value || (value === '' && sex === null) },\n            )}\n          >\n            {key}\n          </SearchLink>\n        ))}\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query || ''}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {filterCenturies.map(century => (\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                className={classNames(\n                  'button mr-1', { 'is-info': centuries.includes(century) },\n                )}\n                params={\n                  {\n                    centuries: centuries.includes(century)\n                      ? centuries.filter(el => el !== century)\n                      : [...centuries, century],\n                  }\n                }\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={classNames(\n                'button is-success', { 'is-outlined': centuries.length },\n              )}\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{ sex: null, query: null, centuries: null }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import classNames from 'classnames';\nimport { Link, useSearchParams } from 'react-router-dom';\n\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      className={classNames(\n        { 'has-text-danger': person.sex === 'f' },\n      )}\n      to={{ pathname: `../${person.slug}`, search: searchParams.toString() }}\n    >\n      {person.name}\n    </Link>\n  );\n};\n","import classNames from 'classnames';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport { Person } from '../types';\nimport { PersonLink } from './PersonLink';\nimport { SearchLink } from './SearchLink';\n\ntype Props = {\n  people: Person[]\n};\n\nconst sortType = ['name', 'sex', 'born', 'died'];\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const { slug: selected } = useParams();\n  const [searchParams] = useSearchParams();\n  const sort = searchParams.get('sort');\n  const order = searchParams.get('order');\n\n  function handleSort(type: string) {\n    switch (true) {\n      case sort === type && order === 'desc':\n        return { sort: null, order: null };\n      case sort === type && order === null:\n        return { sort: type, order: 'desc' };\n      default:\n      case sort !== type:\n        return { sort: type, order: null };\n    }\n  }\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      {!people.length\n        ? <p>There are no people matching the current search criteria</p>\n        : (\n          <>\n            <thead>\n              <tr>\n                {sortType.map(type => (\n                  <th key={type}>\n                    <span className=\"is-flex is-flex-wrap-nowrap\">\n                      {type.charAt(0).toUpperCase() + type.slice(1)}\n\n                      <SearchLink\n                        params={handleSort(type)}\n                      >\n                        <span className=\"icon\">\n                          <i className={classNames(\n                            'fas',\n                            { 'fa-sort': sort !== type },\n                            {\n                              'fa-sort-up': sort === type\n                                && order === null,\n                            },\n                            {\n                              'fa-sort-down': sort === type\n                                && order === 'desc',\n                            },\n                          )}\n                          />\n                        </span>\n                      </SearchLink>\n                    </span>\n                  </th>\n                ))}\n                <th>Mother</th>\n                <th>Father</th>\n              </tr>\n            </thead>\n          </>\n        )}\n\n      <tbody>\n        {people.map(person => {\n          const {\n            sex,\n            born,\n            died,\n            motherName,\n            fatherName,\n            slug,\n          } = person;\n\n          const mother: Person | undefined = people\n            .find(prsn => prsn.name === motherName);\n          const father: Person | undefined = people\n            .find(prsn => prsn.name === fatherName);\n\n          return (\n            <tr\n              key={slug}\n              data-cy=\"person\"\n              className={classNames(\n                { 'has-background-warning': slug === selected },\n              )}\n            >\n              <td>\n                <PersonLink person={person} />\n              </td>\n\n              <td>{sex}</td>\n              <td>{born}</td>\n              <td>{died}</td>\n              <td>\n                {mother\n                  ? <PersonLink person={mother} />\n                  : motherName || '-'}\n              </td>\n              <td>\n                {father\n                  ? <PersonLink person={father} />\n                  : fatherName || '-'}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { getPeople } from '../api';\nimport { Loader } from './Loader';\nimport { Person } from '../types';\nimport { PeopleFilters } from './PeopleFilters';\nimport { PeopleTable } from './PeopleTable';\n\nexport const PeoplePage = () => {\n  const [peopleFromServer, setPeopleFromServer] = useState<Person[]>([]);\n  const [error, setError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const sort = searchParams.get('sort');\n  const order = searchParams.get('order');\n  const sex = searchParams.get('sex');\n  const query = searchParams.get('query');\n  const centuries = searchParams.getAll('centuries');\n\n  // #region initialLoad\n  const getPeopleFromServer = async () => {\n    try {\n      setIsLoading(true);\n      const response = await getPeople();\n\n      setPeopleFromServer(response);\n    } catch {\n      setError(true);\n      setTimeout(() => setError(false), 1000);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getPeopleFromServer();\n  }, []);\n  // #endregion\n\n  // #region getVisiblePeople\n\n  // #region filter\n  function setFilteredPeople(people: Person[]) {\n    let result = [...people];\n\n    if (sex) {\n      result = result.filter(person => person.sex === sex);\n    }\n\n    if (query) {\n      const ifIncludes = (personName: string | null) => {\n        return personName && personName.toLowerCase().includes(query);\n      };\n\n      result = result.filter(\n        ({ name, motherName, fatherName }) => ifIncludes(name)\n          || ifIncludes(motherName)\n          || ifIncludes(fatherName),\n      );\n    }\n\n    if (centuries.length) {\n      result = result.filter(\n        person => centuries.includes(Math.ceil(person.born / 100).toString()),\n      );\n    }\n\n    return result;\n  }\n  // #endregion\n\n  // #region sort\n  function setSortPeople(people: Person[]) {\n    let result = [...people];\n\n    if (sort) {\n      result.sort((a, b) => {\n        switch (sort) {\n          case 'name':\n          case 'sex':\n            return a[sort].localeCompare(b[sort]);\n          case 'born':\n          case 'died':\n            return (a[sort] - b[sort]);\n          default:\n            return 0;\n        }\n      });\n    }\n\n    if (order) {\n      result = result.reverse();\n    }\n\n    return result;\n  }\n  // #endregion\n\n  const visiblePeople = setSortPeople(setFilteredPeople(peopleFromServer));\n  // #endregion\n\n  function getMarkUp() {\n    switch (true) {\n      case isLoading:\n        return (<Loader />);\n      case error:\n        return (\n          <p\n            data-cy=\"peopleLoadingError\"\n            className=\"has-text-danger\"\n          >\n            Something went wrong\n          </p>\n        );\n      case !peopleFromServer.length:\n        return (\n          <p data-cy=\"noPeopleMessage\">\n            There are no people on the server\n          </p>\n        );\n      case !!peopleFromServer.length:\n        return (<PeopleTable people={visiblePeople} />);\n      default:\n        return (<></>);\n    }\n  }\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            {!isLoading && (\n              <PeopleFilters\n                searchParams={searchParams}\n                setSearchParams={setSearchParams}\n              />\n            )}\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {getMarkUp()}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            to=\"/\"\n            className={({ isActive }) => classNames(\n              'navbar-item',\n              { 'has-background-grey-lighter': isActive },\n            )}\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            to=\"/people\"\n            className={({ isActive }) => classNames(\n              'navbar-item',\n              { 'has-background-grey-lighter': isActive },\n            )}\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Navigate, Route, Routes } from 'react-router-dom';\n\nimport './App.scss';\nimport { PeoplePage } from './components/PeoplePage';\nimport { Navbar } from './components/Navbar';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <main className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route\n              path=\"/home\"\n              element={<Navigate to=\"/\" replace />}\n            />\n\n            <Route\n              path=\"/\"\n              element={<h1 className=\"title\">Home Page</h1>}\n            />\n\n            <Route\n              path=\"*\"\n              element={<h1 className=\"title\">Page not found</h1>}\n            />\n\n            <Route path=\"/people\">\n              <Route path=\":slug?\" element={<PeoplePage />} />\n            </Route>\n          </Routes>\n        </div>\n      </main>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}